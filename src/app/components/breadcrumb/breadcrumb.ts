import { AsyncPipe, NgTemplateOutlet } from '@angular/common';
import { Component, ContentChild, Input, OnInit, TemplateRef, ViewEncapsulation, inject } from '@angular/core';
import { RouterLink } from '@angular/router';
import { TBreadcrumbDefinition } from '@app/models';
import { BreadcrumbService } from '@app/services';
import { Observable, map } from 'rxjs';

/** @see https://www.npmjs.com/package/xng-breadcrumb */
@Component({
  selector: 'app-breadcrumb',
  imports: [AsyncPipe, NgTemplateOutlet, RouterLink],
  templateUrl: './breadcrumb.html',
  styleUrls: ['./breadcrumb.scss'],
  encapsulation: ViewEncapsulation.None,
})
export class Breadcrumb implements OnInit {
  /**
   * Breadcrumb item can be customized with this template. Template context
   * is provided label, additional info, first and last indexes. Use cases:
   * 1. Add an icon along with label
   * 2. i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}
   * 3. Change text case {{breadcrumb | titlecase}}
   */
  @ContentChild('breadcrumbItem', { static: false, read: TemplateRef }) itemTemplate!: TemplateRef<any> | null;
  /** anchorTarget = "_blank" makes the breadcrumb link open in a new tab */
  @Input() anchorTarget: '_blank' | '_self' = '_self';
  /** If true, breadcrumb is auto generated even without any mapping label. Default label is same as route segment. */
  @Input() autoGenerate = true;
  /** Custom class provided by consumer to increase specificity. This will benefit to override conflicting styles. */
  @Input() class = '';
  @Input() preserveFragment = true;
  @Input() preserveQueryParams = true;

  breadcrumbs$!: Observable<TBreadcrumbDefinition[]>;
  separatorTemplate!: TemplateRef<any> | null;
  private _separator = '>';
  private readonly breadcrumbService = inject(BreadcrumbService);

  /**
   * Separator between breadcrumbs, defaults to '>'. User can customize separator either by passing a String or Template.
   *
   * String --> Ex: <lui-breadcrumb separator="-" />
   *
   * Template --> Ex: <lui-breadcrumb [separator]="separator" />
   * <ng-template #separator><mat-icon>arrow_right</mat-icon></ng-template>
   */
  get separator(): string {
    return this._separator;
  }

  @Input()
  set separator(value: string | TemplateRef<any>) {
    this.separatorTemplate = value instanceof TemplateRef ? value : null;
    this._separator = value instanceof TemplateRef ? '' : value || '>';
  }

  ngOnInit(): void {
    this.breadcrumbs$ = this.breadcrumbService.breadcrumbs$.pipe(
      map((res: TBreadcrumbDefinition[]) =>
        res
          .filter((br) => this.autoGenerate || !br.isAutoGeneratedLabel)
          .map((br) => {
            const { routeInterceptor, routeLink = '' } = br;
            return { ...br, routeLink: routeInterceptor?.(routeLink, br) || routeLink };
          })
      )
    );
  }
}
