import type { Params } from '@angular/router';

export interface IBreadcrumb {
  /** Actual route path with resolved param. Ex /mentor/2, connect/edit */
  routeLink?: string;
  /**
   * Route with path params converted to a RegExp
   * Path '/mentor/:id' becomes routeRegex '/mentor/[^/]+', which can be matched against when needed
   */
  routeRegex?: string;
  /**
   * This is additional info on each breadcrumb item whether label is auto generated or user specified;
   * isAutoGeneratedLabel has to be present at component level but not at the service,
   * since we may need to support multiple breadcrumb components in same app
   */
  isAutoGeneratedLabel?: boolean;
  /** Query params in string form. */
  queryParams?: Params;
  fragment?: string;
  routeInterceptor?: (routeLink: string, breadcrumb: IBreadcrumb) => string;
}

export type TBreadcrumbDefinition = IBreadcrumb & TBreadcrumbObject;

export type TBreadcrumbFunction = (resolvedLabel?: string) => string;

/** Breadcrumb config provided as part of App Route Config */
export type TBreadcrumbObject = {
  /** Unique alias name for a route path that can be used to dynamically update a route's breadcrumb label via breadcrumbService.set() */
  alias?: string;
  /**
   * Disable a certain breadcrumb in the list. Not clickable.
   * It may be needed when the routing has the path, but navigating to that path is of no use
   */
  disable?: boolean;
  /** Custom data for each breadcrumb that is passed back to ng-template */
  info?: unknown;
  /** Breadcrumb label for a route */
  label?: string | TBreadcrumbFunction;
  /**
   * Interceptor for breadcrumb click action that returns the dynamic path
   * (consumers can change the breadcrumb routing dynamically with this approach)
   */
  routeInterceptor?: (routeLink: string, breadcrumb: IBreadcrumb) => string;
  /** Hide or show the breadcrumb item */
  skip?: boolean;
};
